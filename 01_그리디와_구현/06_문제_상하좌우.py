# <문제> 상하좌우: 문제 설명
# 여행가 A는 N * N 크기의 정사각형 공간 위에 서 있습니다. 이 공간은 1 * 1 크기의 정사각형으로 나누어져 있습니다.
# 가장 왼쪽 위 좌표는 (1, 1)이며, 가장 오른쪽 아래 좌표는 (N, N)에 해당합니다.
# 여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1, 1)입니다.
# 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있습니다.

# 계획서에는 하나의 줄에 띄어씌기를 기준으로 L, R, U, D중 하나의 문자가 반복적으로 적혀 있습니다.
# L : 왼쪽으로 한 칸 이동
# R : 오른쪽으로 한 칸 이동
# U : 위로 한 칸 이동
# D : 아래로 한 칸 이동

# 이때 여행가 A가 N * N 크기의 정사각형 공간을 벗어나는 움직임은 무시됩니다.
# 예를 들어 (1, 1)의 위치에서 L 혹은 U를 만나면 무시됩니다.
# 다음은 N = 5인 지도와 계획서 입니다.

n = 5
move = ["R", "R", "R", "U", "D"," D"]
x, y = 1, 1
for m in move:
    if m == "L":
        if y != 1:
            y -= 1
    elif m == "R":
        if y != 5:
            y += 1
    elif m == "U":
        if x != 1:
            x -= 1
    else:
        if x != 5:
            x += 1
print(x, y)

# [문제 해결 아이디어]
# 요구사항대로 충실히 구현하면 되는 문제
# 일련의 명령에 따라서 개체를 차례대로 이동시킨다는 점에서 시뮬레이션 유형으로도 분류가 된다.
#   - 다만, 알고리즘 교재나 문제 풀이 사이트에 따라서 다르게 부를 수 있으므로,
#   - 코딩 테스트에서의 시뮬레이션 유형, 구현 유형, 완전 탐색 유형은 서로 유사한 점이 많다 정도로만 기억합시다.

# 해답
n = 5
plans = ["R", "R", "R", "U", "D", "D"]
x, y = 1, 1
# L, R, U, D에 따른 이동 방향
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ['L', 'R', 'U', 'D']
# 이동 계획을 하나씩 확인하기
for plan in plans:
    # 이동 후 좌표 구하기
    for i in range(len(move_types)):
        if plan == move_types[i]:
            nx = x + dx[i]
            ny = y + dy[i]
    # 공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue
    # 이동 수행
    x, y = nx, ny
print(x, y)
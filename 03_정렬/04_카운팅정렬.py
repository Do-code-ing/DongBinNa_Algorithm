# 4. 계수 정렬

# 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘입니다.
#   - 계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능합니다.
# 데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 최악의 경우에도 수행시간 O(N+K)를 보장합니다.

# 1. 각 데이터의 이름을 모은 리스트를 초기화한 후,
# 2. 데이터를 조회하며, 각 데이터가 몇 번 등장했는지 카운트하여 리스트에 입력한다.
# 3. 마지막으로 데이터별로 해당 카운트만큼 출력한다.

array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
count = [0] * (max(array)+1)

for i in range(len(array)):
    count[array[i]] += 1

for i in range(len(count)):
    for j in range(count[i]):
        print(i, end=" ")
print()

# [계수 정렬의 복잡도 분석]
# 계수 정렬의 시간 복잡도와 공간 복잡도는 모두 O(N+K)입니다.
# 계수 정렬은 때에 따라서 심각한 비효율성을 초래할 수 있습니다.
#   - 데이터가 0과 999,999로 단 2개만 존재하는 경우를 생각해 봅시다.
# 계수 정렬은 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용할 수 있습니다.
#   - 성적의 경우 100점을 맞은 학생이 여러 명일 수 있기 때문에 계수 정렬이 효과적입니다.


# < 정렬 알고리즘 비교하기 > 
# 앞서 다룬 네 가지 정렬 알고리즘을 비교하면 다음과 같습니다.
# 추가적으로 대부분의 프로그래밍 언어에서 지원하는 표준 정렬 라이브러리는
# 최악의 경우에도 O(NlogN)을 보장하도록 설계되어 있습니다.

# 정렬 알고리즘     평균 시간 복잡도    공간 복잡도     특징
# 선택 정렬         O(N^2)              O(N)        아이디어가 매우 간단합니다.
# 삽입 정렬         O(N^2)              O(N)        데이터가 거의 정렬되어 있을 때는 가장 빠릅니다.
# 퀵 정렬           O(NlogN)            O(N)        대부분의 경우에 가장 적합하며, 충분히 빠릅니다.
# 계수 정렬         O(N+K)              O(N+K)      데이터의 크기가 한정되어 있는 경우에만
#                                                  사용이 가능하지만 매우 빠르게 동작합니다.
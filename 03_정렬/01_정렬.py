# 정렬 알고리즘

# 데이터를 특정한 기준에 따라 순서대로 나열하는 것을 말합니다.
# 일반적으로 문제 상황에 따라서 적절한 정렬 알고리즘이 공식처럼 사용됩니다.


# 1. 선택 정렬

# 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복합니다.

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
    min_index = i
    for j in range(i+1, len(array)):
        if array[min_index] > array[j]:
            min_index = j
    array[i], array[min_index] = array[min_index], array[i]
    
print(array)

# [선택 정렬의 시간 복잡도]
# 선택 정렬은 N번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 합니다.
# 구현 방식에 따라 사소한 오차는 있을 수 있지만, 전체 연산 횟수는 다음과 같습니다.
#   N + (N-1) + (N-2) + ... + 2
# 이는 (N^2 + N - 2) / 2 로 표현할 수 있는데, 빅오 표기법에 따라서 O(N^2)이라고 작성합니다.


# 2. 삽입 정렬

# 처리 되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입합니다.
# 선택 정렬에 비해 구현 난이도가 높은 편이지만, 일반적으로 더 효율적으로 동작합니다.

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)): # 두 번째 순서부터 확인
    for j in range(i, 0, -1): # 첫 번째까지 역순으로 확인
        # 순서 j가 j전의 것보다 작다면,
        if array[j] < array[j-1]:
            array[j], array[j-1] = array[j-1], array[j] # 스왑
        else: # 아니라면
            break # 멈춰 !

print(array)

# [삽입 정렬의 시간 복잡도]
# 삽입 정렬의 시간 복잡도는 O(N^2)이며, 선택 정렬과 마찬가지로 반복문이 두 번 중첩되어 사용됩니다.
# 삽입 정렬은 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작합니다.
#   - 최선의 경우 O(N)의 시간 복잡도를 가집니다.
#   - 이미 정렬되어 있는 상태에서 다시 삽입 정렬을 수행하면 어떻게 될까요?


# 3. 퀵 정렬

# 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법입니다.
# 일반적인 상황에서 가장 많이 사용되는 정렬 알고리즘 중 하나입니다.
# 병합 정렬과 더불어 대부분의 프로그래밍 언어의 정렬 라이브러리의 근간이 되는 알고리즘입니다.
# 가장 기본적인 퀵 정렬은 첫 번째 데이터를 기준 데이터(Pivot)로 설정합니다.

array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array, start, end):
    if start >= end: # 원소가 1개인 경우 종료
        return
    pivot = start # 피벗은 첫 번째 원소
    left = start + 1
    right = end
    while left <= right:
        # 피벗보다 큰 데이터를 찾을 때까지 반복
        while left <= end and array[left] <= array[pivot]:
            left += 1
        # 피벗보다 작은 데이터를 찾을 때까지 반복
        while right > start and array[right] >= array[pivot]:
            right -= 1
        if left > right: # 엇갈렸다면, 작은 데이터와 피벗을 교체 후 while문 탈출
            array[right], array[pivot] = array[pivot], array[right]
        else: # 엇갈리지 않았다면, 작은 데이터와 큰 데이터 교체
            array[left], array[right] = array[right], array[left]
    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
    quick_sort(array, start, right-1)
    quick_sort(array, right+1, end)

quick_sort(array, 0, len(array)-1)
print(array)

# [퀵 정렬의 시간 복잡도]
# 퀵 정렬은 평균의 경우 O(NlogN)의 시간 복잡도를 가집니다.
# 하지만 최악의 경우 O(N^2)의 시간 복잡도를 가집니다.
#   - 첫 번째 원소를 피벗으로 삼을 때, 이미 정렬된 배열에 대허서 퀵 정렬을 수행하면 어떻게 될까요?

# [퀵 정렬 소스코드]:
# 파이썬의 장점을 살린 방식

array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array):
    # 리스트가 하나 이하의 원소만을 담고 있다면 종료
    if len(array) <= 1:
        return array
    pivot = array[0] # 피벗은 첫 번째 원소
    tail = array[1:] # 피벗을 제외한 리스트
    
    left_side = [x for x in tail if x <= pivot] # 분할된 왼쪽 부분
    right_side = [x for x in tail if x > pivot] # 분할된 오른쪽 부분

    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행하고, 전체 리스트 반환
    return quick_sort(left_side) + [pivot] + quick_sort(right_side)

print(quick_sort(array))

# 4. 계수 정렬

# 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘입니다.
#   - 계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능합니다.
# 데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 최악의 경우에도 수행시간 O(N+K)를 보장합니다.

# 1. 각 데이터의 이름을 모은 리스트를 초기화한 후,
# 2. 데이터를 조회하며, 각 데이터가 몇 번 등장했는지 카운트하여 리스트에 입력한다.
# 3. 마지막으로 데이터별로 해당 카운트만큼 출력한다.

array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
count = [0] * (max(array)+1)

for i in range(len(array)):
    count[array[i]] += 1

for i in range(len(count)):
    for j in range(count[i]):
        print(i, end=" ")
print()

# [계수 정렬의 복잡도 분석]
# 계수 정렬의 시간 복잡도와 공간 복잡도는 모두 O(N+K)입니다.
# 계수 정렬은 때에 따라서 심각한 비효율성을 초래할 수 있습니다.
#   - 데이터가 0과 999,999로 단 2개만 존재하는 경우를 생각해 봅시다.
# 계수 정렬은 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용할 수 있습니다.
#   - 성적의 경우 100점을 맞은 학생이 여러 명일 수 있기 때문에 계수 정렬이 효과적입니다.


# < 정렬 알고리즘 비교하기 > 
# 앞서 다룬 네 가지 정렬 알고리즘을 비교하면 다음과 같습니다.
# 추가적으로 대부분의 프로그래밍 언어에서 지원하는 표준 정렬 라이브러리는
# 최악의 경우에도 O(NlogN)을 보장하도록 설계되어 있습니다.

# 정렬 알고리즘     평균 시간 복잡도    공간 복잡도     특징
# 선택 정렬         O(N^2)              O(N)        아이디어가 매우 간단합니다.
# 삽입 정렬         O(N^2)              O(N)        데이터가 거의 정렬되어 있을 때는 가장 빠릅니다.
# 퀵 정렬           O(NlogN)            O(N)        대부분의 경우에 가장 적합하며, 충분히 빠릅니다.
# 계수 정렬         O(N+K)              O(N+K)      데이터의 크기가 한정되어 있는 경우에만
#                                                  사용이 가능하지만 매우 빠르게 동작합니다.


# <문제> 두 배열의 원소 교체: 문제 설명
# 동빈이는 두 개의 배열 A와 B를 가지고 있습니다.
# 두 배열은 N개의 원소로 구성되어 있으며, 배열의 원소는 모두 자연수입니다.
# 동빈이는 최대 K번의 바꿔치기 연산을 수행할 수 있는데, 바꿔치기 연산이란 배열 A에 있는 원소 하나와
# 배열 B에 있는 원소 하나를 골라서 두 원소를 서로 바꾸는 것을 말합니다.
# 동빈이의 최종 목표는 배열 A의 모든 원소의 합이 최대가 되도록 하는 것이며, 여러분은 동빈이를 도와야 합니다.
# N, K 그리고 배열 A와 B의 정보가 주어졌을 때,
# 최대 K번의 바꿔치기 연산을 수행하여 만들 수 있는 배열 A의 모든 원소의 합의 최댓값을 출력하는 프로그램을 작성하세요.

n, k = 5, 3
arr_a = [1, 2, 5, 4, 3]
arr_b = [5, 5, 6, 6, 5]
arr_a.sort()
arr_b.sort(reverse=True)
for i in range(k):
    if arr_a[i] < arr_b[i]:
        arr_a[i], arr_b[i] = arr_b[i], arr_a[i]
    else:
        break
print(sum(arr_a))

# [문제 해결 아이디어]
# 핵심 아이디어: 매번 배열 A에서 가장 작은 원소를 골라서, 배열 B에서 가장 큰 원소와 교체합니다.
# 가장 먼저 배열 A와 B가 주어지면 A에 대하여 오름차순 정렬하고, B에 대하여 내림차순 정렬합니다.
# 이후에 두 배열의 원소를 첫 번째 인덱스부터 차례로 확인하면서 A의 원소가 B의 원소보다 작을 때에만 교체를 수행합니다.
# 이 문제에서는 두 배열의 원소가 최대 100,000개까지 입력될 수 있으므로,
# 최악의 경우 O(NlongN)을 보장하는 정렬 알고리즘을 이용해야 합니다.

n, k = 5, 3
a = [1, 2, 5, 4, 3]
b = [5, 5, 6, 6, 5]
a.sort()
b.sort(reverse=True)
for i in range(k):
    if a[i] < b[i]:
        a[i], b[i] = b[i], a[i]
    else:
        break
print(sum(a))